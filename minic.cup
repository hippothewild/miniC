package Example;

import java_cup.runtime.*;
import Nodes.*;

action code {:
:}

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
:}

/* Parenthesis and Brackets. */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LSQBRACKET, RSQBRACKET;

/* Operators and Assigner. */
terminal PLUS, MINUS, TIMES, DIVIDE, ASSIGN, UNOP;

/* Comparer. */
terminal LESS, GREATER, LESS_EQ, GREATER_EQ, EQ, NOT_EQ;

/* Tokens. */
terminal TOKEN_INT, TOKEN_FLOAT, TOKEN_RETURN, TOKEN_WHILE, TOKEN_DO, TOKEN_FOR, TOKEN_IF, TOKEN_ELSE, TOKEN_CASE, TOKEN_SWITCH, TOKEN_BREAK, TOKEN_DEFAULT;

/* Identifier. */
terminal String ID;

/* Types. */
terminal Float		FLOAT_NUM;
terminal Integer	INT_NUM;

/* Miscellaneous. */
terminal SEMI, COLON, COMMA;

/* Non-terminal program rules. */
non terminal program;
non terminal declList;
non terminal funcList;
non terminal declaration;
non terminal identList;
non terminal identifier;
non terminal function;
non terminal paramList;
non terminal type;
non terminal stmtList;
non terminal expr;
non terminal argList;

/* Non-terminal statement definition. */
non terminal stmt, openStmt, closedStmt;

/* Non-ternimal OPENED statement. */
non terminal ifStmt;
non terminal ifElseOpenStmt;
non terminal whileOpenStmt;
non terminal forOpenStmt;

/* Non-terminal CLOSED statement. */
non terminal ifElseClosedStmt;
non terminal doWhileStmt;
non terminal whileClosedStmt;
non terminal forClosedStmt;
non terminal compoundStmt;
non terminal assignStmt;
non terminal callStmt;
non terminal retStmt;
non terminal switchStmt;

/* Element of CLOSED statement. */
non terminal caseList;
non terminal caseBlock;
non terminal assign;
non terminal call;

precedence left LPAREN, RPAREN;
precedence right UNOP;
precedence left TOKEN_ELSE;
precedence left TIMES, DIVIDE;
precedence left PLUS, MINUS;
precedence left LESS, GREATER, LESS_EQ, GREATER_EQ;
precedence left EQ, NOT_EQ;
precedence right ASSIGN;


/* Program grammars. */

program	::=
		  | declList
		  | funcList
		  | declList funcList
		  ;

declList ::= declaration
		   | declList declaration
		   ;

funcList ::= function
		   | funcList function
		   ;

declaration ::= type identList SEMI
			  ;

identList ::= identifier
			| identList COMMA identifier
			;

identifier ::= ID
			 | ID LSQBRACKET INT_NUM RSQBRACKET
			 ;

function ::= type ID LPAREN RPAREN compoundStmt
		   | type ID LPAREN paramList RPAREN compoundStmt
		   ;

paramList ::= type identifier
			| paramList COMMA type identifier
			;

type ::= TOKEN_INT
	   | TOKEN_FLOAT
	   ;

compoundStmt ::= LBRACKET stmtList RBRACKET
			   | LBRACKET declList stmtList RBRACKET
			   ;

stmtList ::=
		   | stmtList stmt
		   ;

stmt ::= openStmt
	   | closedStmt
	   ;

openStmt ::= ifStmt
		   | ifElseOpenStmt
		   | forOpenStmt
		   | whileOpenStmt
		   ;

closedStmt ::= ifElseClosedStmt
			 | doWhileStmt
			 | whileClosedStmt
			 | forClosedStmt
			 | compoundStmt
			 | assignStmt
			 | callStmt
			 | retStmt
			 | switchStmt
			 | SEMI
			 ;

ifStmt ::= TOKEN_IF LPAREN expr RPAREN stmt
		 ;

ifElseOpenStmt ::= TOKEN_IF LPAREN expr RPAREN closedStmt TOKEN_ELSE openStmt
				 ;

ifElseClosedStmt ::= TOKEN_IF LPAREN expr RPAREN closedStmt TOKEN_ELSE closedStmt
				   ;

forOpenStmt ::= TOKEN_FOR LPAREN assign SEMI expr SEMI assign RPAREN openStmt
			  ;

forClosedStmt ::= TOKEN_FOR LPAREN assign SEMI expr SEMI assign RPAREN closedStmt
			  ;

whileOpenStmt ::= TOKEN_WHILE LPAREN expr RPAREN openStmt
				;

whileClosedStmt ::= TOKEN_WHILE LPAREN expr RPAREN closedStmt
				;

doWhileStmt ::= TOKEN_DO stmt TOKEN_WHILE LPAREN expr RPAREN SEMI
			  ;

assignStmt ::= assign SEMI
			 ;

assign ::= ID ASSIGN expr
		 | ID LSQBRACKET expr RSQBRACKET ASSIGN expr
		 ;

callStmt ::= call SEMI
		   ;

call ::= ID LPAREN RPAREN
	   | ID LPAREN argList RPAREN
       ;

retStmt ::= TOKEN_RETURN SEMI
		  | TOKEN_RETURN expr SEMI
		  ;

switchStmt ::= TOKEN_SWITCH LPAREN identifier RPAREN LBRACKET caseList RBRACKET
			 ;

caseList ::= caseBlock
		   | caseBlock TOKEN_DEFAULT COLON stmtList
		   | caseBlock TOKEN_DEFAULT COLON stmtList TOKEN_BREAK SEMI
		   ;

caseBlock ::=
			| caseBlock TOKEN_CASE INT_NUM COLON stmtList
			| caseBlock TOKEN_CASE INT_NUM COLON stmtList TOKEN_BREAK SEMI
			;

expr ::= MINUS expr
		 %prec UNOP
	   | expr TIMES expr
	   | expr DIVIDE expr
	   | expr PLUS expr
	   | expr MINUS expr
	   | expr LESS expr
	   | expr GREATER expr
	   | expr LESS_EQ expr
	   | expr GREATER_EQ expr
	   | expr EQ expr
	   | expr NOT_EQ expr
	   | call
	   | INT_NUM
	   | FLOAT_NUM
	   | ID
	   | ID LSQBRACKET expr RSQBRACKET
	   | LPAREN expr RPAREN
	   ;

argList ::= expr
		  | argList COMMA expr
		  ;
