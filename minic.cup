package Example;

import java_cup.runtime.*;
import Absyn.*;

action code {:
:}

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
:}

/* Parenthesis and Brackets. */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LSQBRACKET, RSQBRACKET;

/* Operators and Assigner. */
terminal PLUS, MINUS, TIMES, DIVIDE, ASSIGN, UNOP;

/* Comparer. */
terminal LESS, GREATER, LESS_EQ, GREATER_EQ, EQ, NOT_EQ;

/* Tokens. */
terminal TOKEN_INT, TOKEN_FLOAT, TOKEN_RETURN, TOKEN_WHILE, TOKEN_DO, TOKEN_FOR, TOKEN_IF, TOKEN_ELSE, TOKEN_CASE, TOKEN_SWITCH, TOKEN_BREAK, TOKEN_DEFAULT;

/* Identifier. */
terminal String ID;

/* Types. */
terminal Float		FLOAT_NUM;
terminal Integer	INT_NUM;

/* Miscellaneous. */
terminal SEMI, COLON, COMMA;

/* Non-terminal program rules. */
non terminal Program		program;
non terminal DeclList		declList;
non terminal FuncList		funcList;
non terminal Declaration	declaration;
non terminal IdentList		identList;
non terminal Identifier		identifier;
non terminal FunctionDec	function;
non terminal ParamList		paramList;
non terminal Type			type;
non terminal StmtList		stmtList;
non terminal Expr			expr;
non terminal ArgList		argList;

/* Non-terminal statement definition. */
non terminal Stmt			stmt, openStmt, closedStmt;

/* Non-ternimal OPENED/CLOSED statement. */
non terminal WhileStmt		doWhileStmt, whileOpenStmt, whileClosedStmt;
non terminal ForStmt		forOpenStmt, forClosedStmt;
non terminal IfStmt			ifStmt, ifElseOpenStmt, ifElseClosedStmt;

/* Non-terminal of CLOSED statement and its element. */
non terminal CompoundStmt	compoundStmt;
non terminal AssignStmt		assignStmt;
non terminal Assign			assign;
non terminal CallStmt		callStmt;
non terminal Call			call;
non terminal RetStmt		retStmt;
non terminal SwitchStmt		switchStmt;
non terminal CaseList		caseList;
non terminal CaseStmt		caseStmt;

precedence left LPAREN, RPAREN;
precedence right UNOP;
precedence left TOKEN_ELSE;
precedence left TIMES, DIVIDE;
precedence left PLUS, MINUS;
precedence left LESS, GREATER, LESS_EQ, GREATER_EQ;
precedence left EQ, NOT_EQ;
precedence right ASSIGN;


/* Program grammars. */

program	::=
			{:
				RESULT = new Program(null, null);
			:}
		  | declList:d
			{:
				RESULT = new Program(d, null);
			:}
		  | funcList:f
			{:
				RESULT = new Program(null, f);
			:}
		  | declList:d funcList:f
			{:
				RESULT = new Program(d, f);
			:}
		  ;

declList ::= declaration:d
			 {:
				 RESULT = new DeclList(d);
			 :}
		   | declList:dl declaration:d
			 {:
				 dl.add(d);
				 RESULT = dl;
			 :}
		   ;

funcList ::= function:f
			 {:
				 RESULT = new FuncList(f);
			 :}
		   | funcList:fl function:f
			 {:
				 fl.add(f);
				 RESULT = fl;
			 :}
		   ;

declaration ::= type:t identList:i SEMI
				{:
					RESULT = new Declaration(t, i);
				:}
			  ;

identList ::= identifier:i
			  {:
				  RESULT = new IdentList(i);
			  :}
			| identList:il COMMA identifier:i
			  {:
				  il.add(i);
				  RESULT = il;
			  :}
			;

identifier ::= ID:i
			   {:
				   RESULT = new Identifier(i);
			   :}
			 | ID:i LSQBRACKET INT_NUM:n RSQBRACKET
			   {:
				   RESULT = new Identifier(i, n);
			   :}
			 ;

function ::= type:t ID:i LPAREN RPAREN compoundStmt:c
			 {:
				 RESULT = new FunctionDec(t, i, null, c);
			 :}
		   | type:t ID:i LPAREN paramList:p RPAREN compoundStmt:c
			 {:
				 RESULT = new FunctionDec(t, i, p, c);
			 :}
		   ;

paramList ::= type:t identifier:i
			  {:
				  Param p = new Param(t, i);
				  RESULT = new ParamList(p);
			  :}
			| paramList:pl COMMA type:t identifier:i
			  {:
				  Param p = new Param(t, i);
				  pl.add(p);
				  RESULT = pl;
			  :}
			;

type ::= TOKEN_INT
		 {:
			 RESULT = new Type(TypeName.INT);
		 :}
	   | TOKEN_FLOAT
		 {:
			 RESULT = new Type(TypeName.FLOAT);
		 :}
	   ;

compoundStmt ::= LBRACKET stmtList:sl RBRACKET
				 {:
					 RESULT = new CompoundStmt(null, sl);
				 :}
			   | LBRACKET declList:dl stmtList:sl RBRACKET
				 {:
					 RESULT = new CompoundStmt(dl, sl);
				 :}
			   ;

stmtList ::=
			 {:
				 RESULT = new StmtList(null);
			 :}
		   | stmtList:sl stmt:s
			 {:
				 sl.add(s);
				 RESULT = sl;
			 :}
		   ;

stmt ::= openStmt:s
		 {:
			 RESULT = s;
		 :}
	   | closedStmt:s
		 {:
			 RESULT = s;
		 :}
	   ;

openStmt ::= ifStmt:s
			 {:
				 RESULT = s;
			 :}
		   | ifElseOpenStmt:s
			 {:
				 RESULT = s;
			 :}
		   | forOpenStmt:s
			 {:
				 RESULT = s;
			 :}
		   | whileOpenStmt:s
			 {:
				 RESULT = s;
			 :}
		   ;

closedStmt ::= ifElseClosedStmt:s
			   {:
				   RESULT = s;
			   :}
			 | doWhileStmt:s
			   {:
				   RESULT = s;
			   :}
			 | whileClosedStmt:s
			   {:
				   RESULT = s;
			   :}
			 | forClosedStmt:s
			   {:
				   RESULT = s;
			   :}
			 | compoundStmt:s
			   {:
				   RESULT = s;
			   :}
			 | assignStmt:s
			   {:
				   RESULT = s;
			   :}
			 | callStmt:s
			   {:
				   RESULT = s;
			   :}
			 | retStmt:s
			   {:
				   RESULT = s;
			   :}
			 | switchStmt:s
			   {:
				   RESULT = s;
			   :}
			 | SEMI
			   {:
				   RESULT = new EmptyStmt();
			   :}
			 ;

ifStmt ::= TOKEN_IF LPAREN expr RPAREN stmt
		 ;

ifElseOpenStmt ::= TOKEN_IF LPAREN expr RPAREN closedStmt TOKEN_ELSE openStmt
				 ;

ifElseClosedStmt ::= TOKEN_IF LPAREN expr RPAREN closedStmt TOKEN_ELSE closedStmt
				   ;

forOpenStmt ::= TOKEN_FOR LPAREN assign SEMI expr SEMI assign RPAREN openStmt
			  ;

forClosedStmt ::= TOKEN_FOR LPAREN assign SEMI expr SEMI assign RPAREN closedStmt
			  ;

whileOpenStmt ::= TOKEN_WHILE LPAREN expr RPAREN openStmt
				;

whileClosedStmt ::= TOKEN_WHILE LPAREN expr RPAREN closedStmt
				;

doWhileStmt ::= TOKEN_DO stmt TOKEN_WHILE LPAREN expr RPAREN SEMI
			  ;

assignStmt ::= assign SEMI
			 ;

assign ::= ID ASSIGN expr
		 | ID LSQBRACKET expr RSQBRACKET ASSIGN expr
		 ;

callStmt ::= call SEMI
		   ;

call ::= ID LPAREN RPAREN
	   | ID LPAREN argList RPAREN
       ;

retStmt ::= TOKEN_RETURN SEMI
		  | TOKEN_RETURN expr SEMI
		  ;

switchStmt ::= TOKEN_SWITCH LPAREN identifier RPAREN LBRACKET caseList RBRACKET
			 ;

caseList ::= caseStmt
		   | caseStmt TOKEN_DEFAULT COLON stmtList
		   | caseStmt TOKEN_DEFAULT COLON stmtList TOKEN_BREAK SEMI
		   ;

caseStmt ::=
			| caseStmt TOKEN_CASE INT_NUM COLON stmtList
			| caseStmt TOKEN_CASE INT_NUM COLON stmtList TOKEN_BREAK SEMI
			;

expr ::= MINUS expr
		 %prec UNOP
	   | expr TIMES expr
	   | expr DIVIDE expr
	   | expr PLUS expr
	   | expr MINUS expr
	   | expr LESS expr
	   | expr GREATER expr
	   | expr LESS_EQ expr
	   | expr GREATER_EQ expr
	   | expr EQ expr
	   | expr NOT_EQ expr
	   | call
	   | INT_NUM
	   | FLOAT_NUM
	   | ID
	   | ID LSQBRACKET expr RSQBRACKET
	   | LPAREN expr RPAREN
	   ;

argList ::= expr
		  | argList COMMA expr
		  ;
